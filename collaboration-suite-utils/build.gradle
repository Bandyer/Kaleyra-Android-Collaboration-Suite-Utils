/*
 *  Copyright (C) 2023 Kaleyra S.p.a. All Rights Reserved.
 *  See LICENSE.txt for licensing information
 */

import com.github.jk1.license.render.*

plugins {
    id "com.android.library"
    id "maven-publish"
    id "kotlin-android"
    id "kotlin-kapt"
    alias(catalog.plugins.dokka)
    alias(catalog.plugins.licenseReport)
}


apply from: "../publish.gradle"
apply from: "../licenses.gradle"

android {

    compileSdkVersion catalog.versions.sdkVersion.get().toInteger()
    buildToolsVersion catalog.versions.toolsVersion.get()

    defaultConfig {
        minSdkVersion catalog.versions.minSdkVersion.get()
        targetSdkVersion catalog.versions.sdkVersion.get().toInteger()
        versionCode 1
        versionName moduleVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFile "consumer-rules.pro"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'LIBRARY_VERSION_NAME', "\"$version\""
        }
        debug {
            buildConfigField 'String', 'LIBRARY_VERSION_NAME', "\"$version\""
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    /*** Platform ***/
    implementation catalog.appcompat

    /*** Lifecycle ***/
    implementation catalog.coroutines

    /*** Testing ***/
    testImplementation catalog.junit
    testImplementation catalog.mockk
    testImplementation catalog.flowTestObserver
    testImplementation catalog.coroutinesTest

    androidTestImplementation catalog.junitTestExt
    androidTestImplementation(catalog.androidxTestEspressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    coreLibraryDesugaring catalog.desugar

    api catalog.androidxStartupRuntime

    /*** Documentation ***/
    dokkaHtmlPlugin catalog.dokkaKotlinAsJava
}

licenseReport {
    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
    outputDir = "$projectDir/build/licenses"

    // Select projects to examine for dependencies.
    // Defaults to current project and all its subprojects
    projects = [project] + project.subprojects

    // Adjust the configurations to fetch dependencies. Default is 'runtimeClasspath'
    // For Android projects use 'releaseRuntimeClasspath' or 'yourFlavorNameReleaseRuntimeClasspath'
    // Use 'ALL' to dynamically resolve all configurations:
    // configurations = ALL
    configurations = ['releaseRuntimeClasspath']

    // Set custom report renderer, implementing ReportRenderer.
    // Yes, you can write your own to support any format necessary.
    renderers = [new JsonReportRenderer('licenses.json', false)]
}

// workaround for mockk spyk(proxy)
// https://mockk.io/doc/md/jdk16-access-exceptions.html
tasks.withType(Test) {
    jvmArgs(
            "--add-opens", "java.base/java.time=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang.reflect=ALL-UNNAMED"
    )
}
