buildscript {

    ext.dokka_version = "1.4.32"

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: 'org.jetbrains.dokka'
apply plugin: "kotlin-kapt"


def gitHubUsername = "Bandyer"
def gitHubProjectName = "Android-Common"

// init - do not modify this if your project is on github
def siteUrl = "https://github.com/${gitHubUsername}/${gitHubProjectName}"
def gitUrl = siteUrl + '.git'
def bugTrackerUrl = siteUrl + '/issues/'
def projectName = gitHubProjectName
// end - do not modify this if your project is on github

def projectDesc = "This library is the Bandyer's commons for android."
def projectGroup = "com.bandyer"
def projectOrg = "bandyer"
def projectLicenses = ["Apache-2.0"]
def projectLicenseUrl = "https://github.com/${gitHubUsername}/${gitHubProjectName}/LICENSE.txt"
def projectKeywords = ['chat', 'communication', 'android', 'video', 'conference', 'helpdesk', 'bandyer', 'webrtc', 'call', 'audio']
def developerFullName = "Bandyer Srl"
group = projectGroup
version = "1.0.10"

def weakHandler_version = "1.1"
def supportTestVersion = "1.0.2"
def espressoVersion = "3.0.2"

android {
    compileSdkVersion sdkVersion
    buildToolsVersion buildToolsVersion
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion sdkVersion
        versionCode 1
        versionName version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        warning 'InvalidPackage'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

kapt {
    mapDiagnosticLocations = true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    /*** Platform ***/
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation('androidx.appcompat:appcompat:1.1.0')

    /*** Lifecycle ***/
    implementation 'androidx.lifecycle:lifecycle-runtime:2.2.0'
    kapt 'androidx.lifecycle:lifecycle-compiler:2.2.0'

    /*** Testing ***/
    testImplementation 'junit:junit:4.12'
    testImplementation 'io.mockk:mockk:1.9.3'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'org.mockito:mockito-android:2.+'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    /*** Other Dependencies ***/
    api "com.badoo.mobile:android-weak-handler:$weakHandler_version"

    /*** Documentation ***/
    dokkaHtmlPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:$dokka_version")
}


Properties properties = new Properties()
if (project.rootProject.file("local.properties").exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

install {
    repositories.mavenInstaller {
        pom.project {
            name projectName
            description projectDesc
            packaging 'aar'
            groupId projectGroup
            version version
            url siteUrl
            licenses {
                license {
                    name projectLicenses[0]
                    url projectLicenseUrl
                }
            }
            developers {
                developer {
                    id properties.getProperty("bintray.user")
                    name developerFullName
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl

            }
        }
    }
}

afterEvaluate {
    publishing {
        repositories {
            maven {
                url = "s3://maven-bandyer/releases/"
                credentials(AwsCredentials) {
                    accessKey = properties.getProperty("maven.accessKey")
                    secretKey = properties.getProperty("maven.secretKey")
                }
            }
        }

        publications {
            release(MavenPublication) {
                from components.release
                groupId = projectGroup
                artifactId = project.getName()
                version = version
                artifact kdocJar
                artifact sourcesJar
            }
        }
    }
}

task invalidateCache(type: Exec) {
    workingDir '../scripts'
    def publishPath = "releases"
    def packageName = projectGroup + "." + project.getName()
    commandLine 'python', './invalidate_s3_cache.py', properties.getProperty("maven.accessKey"), properties.getProperty("maven.secretKey"), properties.getProperty("maven.distributionId"), publishPath, packageName ,version
}

task publishUpload {
    def dryRun = true
    def publishTask = 'publishToMavenLocal'
    if(!dryRun) publishTask = 'publish'
    dependsOn publishTask
    dependsOn 'invalidateCache'
    tasks.findByName('invalidateCache').mustRunAfter publishTask
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}

task dokkaDoc() {
    dependsOn dokkaHtml
}

task publishDocs(type: Exec) {
    workingDir '../scripts'
    commandLine 'python', './publish_doc.py', "$projectGroup", "${project.name}", "$version"
}

dokkaHtml {
    outputDirectory = new File("$buildDir/kDoc")
    dokkaSourceSets {
        configureEach {
            reportUndocumented.set(true)
            jdkVersion.set(8)
            includeNonPublic.set(false)
            skipEmptyPackages.set(true)
        }
    }
}

task kdocJar(type: Jar, dependsOn: dokkaHtml) {
    classifier = 'kdoc'
    from "$buildDir/kDoc"
}

artifacts {
    archives kdocJar
    archives sourcesJar
}

//////////////////////// ADD LICENSE IN AAR //////////////////////////////////
def projName = name
def outputAarDir = file('build/outputs/aar')
def outputAarUnzipedDir = file('build/outputs/aar/unziped')
def aarReleaseFile = file('build/outputs/aar/' + projName + '-release.aar')

task unzipAar(type: Copy) {
    from zipTree(aarReleaseFile)
    into outputAarUnzipedDir
}

task addLicenseFileInUnzipedAar(type: Copy, dependsOn: 'unzipAar') {
    from file("../")
    into outputAarUnzipedDir
    include 'LICENSE.txt', 'THIRD-PARTY_LICENSES.txt'
}

task reZipAar(type: Zip, dependsOn: 'addLicenseFileInUnzipedAar') {
    from outputAarUnzipedDir
    includeEmptyDirs = false
    include '*'
    include '*/*'
    include '*/*/*'
    archiveName projName + '-release.aar'
    destinationDir(outputAarDir)
    doLast {
        outputAarUnzipedDir.deleteDir()
    }
}

afterEvaluate {
    bundleReleaseAar.finalizedBy(reZipAar)
}