buildscript {

    ext.dokka_version = "1.5.31"

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    }
}

plugins {
    id 'com.android.library'
    id 'maven-publish'
    id "kotlin-android"
    id 'org.jetbrains.dokka' version "1.5.31"
    id "kotlin-kapt"
}

apply from: '../publish.gradle'

group = moduleGroupId
version = moduleVersion

def gitHubUsername = "Bandyer"
def gitHubProjectName = "Bandyer-Android-Common"

// init - do not modify this if your project is on github
def siteUrl = "https://github.com/${gitHubUsername}/${gitHubProjectName}"
def gitUrl = siteUrl + '.git'
def bugTrackerUrl = siteUrl + '/issues/'
def projectName = gitHubProjectName
// end - do not modify this if your project is on github

def projectDesc = "This library is the Bandyer's commons for android."
def projectGroup = "com.bandyer"
def projectOrg = "bandyer"
def projectLicenses = ["Apache-2.0"]
def projectLicenseUrl = "https://github.com/${gitHubUsername}/${gitHubProjectName}/LICENSE.txt"
def projectKeywords = ['chat', 'communication', 'android', 'video', 'conference', 'helpdesk', 'bandyer', 'webrtc', 'call', 'audio']
def developerFullName = "Bandyer Srl"

group = projectGroup
version = "1.0.11"

def appCompat_version = "1.3.1"
def weakHandler_version = "1.1"
def kotlin_coroutines = "1.5.2"
def desugaring_version = "1.1.5"

def compiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(11)
}

android {
    compileSdkVersion sdkVersion
    buildToolsVersion buildToolsVersion
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion sdkVersion
        versionCode 1
        versionName moduleVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'LIBRARY_VERSION_NAME', "\"$version\""
        }
        debug {
            buildConfigField 'String', 'LIBRARY_VERSION_NAME', "\"$version\""
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    // For Kotlin projects
    kotlinOptions {
        jvmTarget = "11"
        jdkHome = compiler.get().metadata.installationPath.asFile.absolutePath
    }

    lintOptions {
        warning 'InvalidPackage'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

kapt {
    mapDiagnosticLocations = true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    /*** Platform ***/
    implementation "androidx.appcompat:appcompat:$appCompat_version"

    /*** Lifecycle ***/
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines"

    /*** Testing ***/
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'io.mockk:mockk:1.12.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'org.mockito:mockito-android:4.0.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.4.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$desugaring_version"

    api "androidx.startup:startup-runtime:1.1.1"

    /*** Other Dependencies ***/
    api "com.badoo.mobile:android-weak-handler:$weakHandler_version"

    /*** Documentation ***/
    dokkaHtmlPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:$dokka_version")
}

//////////////////////// ADD LICENSE IN AAR //////////////////////////////////
def projName = name
def outputAarDir = file('build/outputs/aar')
def outputAarUnzipedDir = file('build/outputs/aar/unziped')
def aarReleaseFile = file('build/outputs/aar/' + projName + '-release.aar')

task unzipAar(type: Copy) {
    from zipTree(aarReleaseFile)
    into outputAarUnzipedDir
}

task addLicenseFileInUnzipedAar(type: Copy, dependsOn: 'unzipAar') {
    from file("../")
    into outputAarUnzipedDir
    include 'LICENSE.txt', 'THIRD-PARTY_LICENSES.txt'
}

task reZipAar(type: Zip, dependsOn: 'addLicenseFileInUnzipedAar') {
    from outputAarUnzipedDir
    includeEmptyDirs = false
    include '*'
    include '*/*'
    include '*/*/*'
    archiveName projName + '-release.aar'
    destinationDir(outputAarDir)
    doLast {
        outputAarUnzipedDir.deleteDir()
    }
}

afterEvaluate {
    bundleReleaseAar.finalizedBy(reZipAar)
}